#ifdef __ARMCC_VERSION
; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: armcc [4d3637]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.AddRSLicense||, CODE, READONLY, ALIGN=2

AddRSLicense PROC
        PUSH     {r0-r10,lr}
        MOV      r9,r3
        MOV      r10,r2
        MOV      r8,r1
        MOVS     r4,r0
        MOV      r5,#1
        BEQ      |L0.112|
        ADDS     r0,r4,#1
        BEQ      |L0.112|
        MOV      r6,sp
        LDR      r7,|L0.120|
        MOV      r2,#0x55555555
        MOVS     r1,#0x10
        MOV      r0,r6
        BL       CPUID
        MOVS     r1,#0
        ASRS     r2,r0,#31
        ADD      r0,r0,r2,LSR #30
        B        |L0.54|
|L0.48|
        LDM      r6!,{r2}
        ADDS     r1,r1,#1
        ADD      r7,r7,r2
|L0.54|
        CMP      r1,r0,ASR #2
        BLT      |L0.48|
        ADD      r2,r7,r10
        CMP      r2,r9
        BNE      |L0.70|
        MOVS     r5,#0
|L0.70|
        MOVS     r0,#0
        ASR      r3,r8,#31
        MOV      r1,r4
        MOV      r6,r0
        ADD      r3,r8,r3,LSR #30
        B        |L0.106|
|L0.86|
        CMP      r0,#0
        BLE      |L0.102|
        LDR      r7,[r4,#0]
        CMP      r7,r1
        BNE      |L0.102|
        CMP      r2,r9
        BNE      |L0.102|
        STR      r6,[r4,#0]
|L0.102|
        ADDS     r0,r0,#1
        ADDS     r4,r4,#4
|L0.106|
        CMP      r0,r3,ASR #2
        BLT      |L0.86|
|L0.112|
        ADD      sp,sp,#0x10
        MOV      r0,r5
        POP      {r4-r10,pc}
        ENDP

|L0.120|
        DCD      0x83548797

        AREA ||i.BatteryVoltage||, CODE, READONLY, ALIGN=2

BatteryVoltage PROC
        PUSH     {r4-r7,lr}
        LDR      r5,|L1.288|
        VPUSH    {d8}
        SUB      sp,sp,#0x84
        LDR      r0,[r5,#0x4c]
        ORR      r0,r0,#0x2000
        STR      r0,[r5,#0x4c]
        LDR      r0,[r5,#0x4c]
        AND      r0,r0,#0x2000
        STR      r0,[sp,#0x7c]
        LDR      r0,[r5,#0x88]
        ORR      r0,r0,#0x30000000
        STR      r0,[r5,#0x88]
        LDR      r6,|L1.292|
        MOV      r0,sp
        STR      r6,[sp,#0]
        BL       HAL_ADC_DeInit
        CBZ      r0,|L1.62|
        VMOV.F32 s0,#1.00000000
|L1.54|
        ADD      sp,sp,#0x84
        VPOP     {d8}
        POP      {r4-r7,pc}
|L1.62|
        MOVS     r4,#0
        MOVS     r7,#4
        STR      r4,[sp,#4]
        STRD     r4,r7,[sp,#0x10]
        STR      r4,[sp,#8]
        STR      r4,[sp,#0xc]
        STRB     r4,[sp,#0x18]
        MOVS     r0,#1
        STRB     r4,[sp,#0x19]
        STR      r0,[sp,#0x1c]
        STRB     r4,[sp,#0x20]
        STRD     r0,r4,[sp,#0x24]
        LSLS     r0,r0,#12
        STR      r0,[sp,#0x34]
        STR      r4,[sp,#0x2c]
        STRB     r4,[sp,#0x30]
        STRB     r4,[sp,#0x38]
        MOV      r0,sp
        BL       HAL_ADC_Init
        CBZ      r0,|L1.124|
        VMOV.F32 s0,#2.00000000
        B        |L1.54|
|L1.124|
        LDR      r0,|L1.296|
        STR      r0,[sp,#0x64]
        MOVS     r0,#6
        STR      r0,[sp,#0x68]
        MOVS     r0,#7
        STR      r0,[sp,#0x6c]
        MOVS     r0,#0x7f
        STRD     r0,r7,[sp,#0x70]
        ADD      r1,sp,#0x64
        STR      r4,[sp,#0x78]
        MOV      r0,sp
        BL       HAL_ADC_ConfigChannel
        CBZ      r0,|L1.160|
        VMOV.F32 s0,#3.00000000
        B        |L1.54|
|L1.160|
        MOVS     r1,#0x7f
        MOV      r0,sp
        BL       HAL_ADCEx_Calibration_Start
        CBZ      r0,|L1.176|
        VMOV.F32 s0,#4.00000000
        B        |L1.54|
|L1.176|
        MOV      r0,sp
        BL       HAL_ADC_Start
        CBZ      r0,|L1.190|
        VMOV.F32 s0,#5.00000000
        B        |L1.54|
|L1.190|
        MOVS     r1,#0xa
        MOV      r0,sp
        BL       HAL_ADC_PollForConversion
        CBZ      r0,|L1.206|
        VMOV.F32 s0,#6.00000000
        B        |L1.54|
|L1.206|
        MOV      r0,sp
        BL       HAL_ADC_GetValue
        LDR      r1,|L1.300|
        UDIV     r0,r1,r0
        BL       __aeabi_ui2d
        VLDR     d1,|L1.304|
        VMOV     r2,r3,d1
        BL       __aeabi_ddiv
        BL       __aeabi_d2f
        VMOV     s16,r0
        MOV      r0,sp
        BL       ADC_Disable
        MOV      r0,sp
        BL       HAL_ADC_DeInit
        LDR      r0,[r5,#0x88]!
        BIC      r0,r0,#0x30000000
        STR      r0,[r5],#-0x3c
        LDR      r0,[r5,#0]
        BIC      r0,r0,#0x2000
        STR      r0,[r5,#0]
        LDR      r0,[r6,#8]
        BIC      r0,r0,#0x1800000
        STR      r0,[r6,#8]
        VMOV.F32 s0,s16
        B        |L1.54|
        ENDP

|L1.288|
        DCD      0x40021000
|L1.292|
        DCD      0x50040000
|L1.296|
        DCD      0x80000001
|L1.300|
        DCD      0x004afb50
|L1.304|
        DCFD     0x408f400000000000 ; 1000

        AREA ||i.CPUID||, CODE, READONLY, ALIGN=2

CPUID PROC
        PUSH     {r3-r6,lr}
        LDR      r6,|L2.84|
        LDR      r5,|L2.84|
        MOV      r4,r0
        LDR      r3,|L2.84|
        SUBS     r6,r6,#0x10
        SUBS     r5,r5,#0x70
        CMP      r1,#0x10
        MOV      r0,#0
        BLT      |L2.82|
        EORS     r3,r3,r2
        MOVS.W   r1,#0
|L2.28|
        LDRB     r2,[r3],#1
        ADDS     r1,r1,#1
        STRB     r2,[r4],#1
        CMP      r1,#0xc
        BLT      |L2.28|
        EOR      r1,r5,#0x55555555
        EOR      r2,r6,#0x55555555
        LDRB     r1,[r1,#0]
        LDRH     r2,[r2,#0]
        AND      r1,r1,#0x1f
        ORR      r1,r1,r2,LSL #16
        STR      r1,[sp,#0]
        MOVS     r1,#0
        ADDS     r0,r0,#0xc
|L2.68|
        LDRB     r2,[sp,r1]
        STRB     r2,[r4,r1]
        ADDS     r1,r1,#1
        CMP      r1,#4
        BLT      |L2.68|
        ADDS     r0,r0,#4
|L2.82|
        POP      {r3-r6,pc}
        ENDP

|L2.84|
        DCD      0x4aaa20c5

        AREA ||.ARM.exidx||, LINKORDER=||i.CPUID||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

        DCD      0x00000000
        RELOC 42, ||i.CPUID||
        DCD      0x00000001

        AREA ||area_number.4||, LINKORDER=||i.AddRSLicense||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

        EXPORTAS ||area_number.4||, ||.ARM.exidx||
        DCD      0x00000000
        RELOC 42, ||i.AddRSLicense||
        DCD      0x00000001

        AREA ||area_number.5||, LINKORDER=||i.BatteryVoltage||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

        EXPORTAS ||area_number.5||, ||.ARM.exidx||
        DCD      0x00000000
        RELOC 42, ||i.BatteryVoltage||
        DCD      0x00000001

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

;*** Start embedded assembler ***

#line 1 ".\\Utils\\mbed-util.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_mbed_util_cpp_CPUID___ZN32_INTERNAL_13_mbed_util_cpp_CPUID7__REV16Ej|
#line 467 "./mbed-os/cmsis/TARGET_CORTEX_M/cmsis_armcc.h"
|__asm___13_mbed_util_cpp_CPUID___ZN32_INTERNAL_13_mbed_util_cpp_CPUID7__REV16Ej| PROC
#line 468

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_mbed_util_cpp_CPUID___ZN32_INTERNAL_13_mbed_util_cpp_CPUID7__REVSHEs|
#line 482
|__asm___13_mbed_util_cpp_CPUID___ZN32_INTERNAL_13_mbed_util_cpp_CPUID7__REVSHEs| PROC
#line 483

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_mbed_util_cpp_CPUID___ZN32_INTERNAL_13_mbed_util_cpp_CPUID5__RRXEj|
#line 669
|__asm___13_mbed_util_cpp_CPUID___ZN32_INTERNAL_13_mbed_util_cpp_CPUID5__RRXEj| PROC
#line 670

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT AddRSLicense [CODE]
        EXPORT BatteryVoltage [CODE]
        EXPORT CPUID [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT ||Lib$$Request$$cpplib|| [CODE,WEAK]
        IMPORT HAL_ADC_DeInit [CODE]
        IMPORT HAL_ADC_Init [CODE]
        IMPORT HAL_ADC_ConfigChannel [CODE]
        IMPORT HAL_ADCEx_Calibration_Start [CODE]
        IMPORT HAL_ADC_Start [CODE]
        IMPORT HAL_ADC_PollForConversion [CODE]
        IMPORT HAL_ADC_GetValue [CODE]
        IMPORT __aeabi_ui2d [CODE]
        IMPORT __aeabi_ddiv [CODE]
        IMPORT __aeabi_d2f [CODE]
        IMPORT ADC_Disable [CODE]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,3
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,6,0
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
;        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END

#elif defined(__GNUC__)
	.cpu cortex-m4
	.eabi_attribute 27, 1
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 1
	.eabi_attribute 30, 4
	.eabi_attribute 34, 1
	.eabi_attribute 18, 4
	.file	"mbed-util.cpp"
	.text
	.section	.text.CPUID.part.0,"ax",%progbits
	.align	1
	.arch armv7e-m
	.syntax unified
	.thumb
	.thumb_func
	.fpu fpv4-sp-d16
	.type	CPUID.part.0, %function
CPUID.part.0:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	ldr	r3, .L4
	eors	r3, r3, r1
	mov	r2, r0
	add	r1, r0, #12
	subs	r3, r3, r0
.L2:
	ldrb	r4, [r2, r3]	@ zero_extendqisi2
	strb	r4, [r2], #1
	cmp	r1, r2
	bne	.L2
	ldr	r3, .L4+4
	ldrh	r2, [r3]
	subs	r3, r3, #224
	ldrh	r3, [r3]
	and	r3, r3, #31
	orr	r3, r3, r2, lsl #16
	ubfx	r2, r3, #8, #8
	strb	r3, [r0, #12]
	strb	r2, [r0, #13]
	ubfx	r2, r3, #16, #8
	ubfx	r3, r3, #24, #8
	strb	r2, [r0, #14]
	strb	r3, [r0, #15]
	movs	r0, #16
	pop	{r4, pc}
.L5:
	.align	2
.L4:
	.word	1252663493
	.word	536835552
	.size	CPUID.part.0, .-CPUID.part.0
	.section	.text.CPUID,"ax",%progbits
	.align	1
	.global	CPUID
	.syntax unified
	.thumb
	.thumb_func
	.fpu fpv4-sp-d16
	.type	CPUID, %function
CPUID:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #15
	ble	.L7
	mov	r1, r2
	b	CPUID.part.0
.L7:
	movs	r0, #0
	bx	lr
	.size	CPUID, .-CPUID
	.section	.text.AddRSLicense,"ax",%progbits
	.align	1
	.global	AddRSLicense
	.syntax unified
	.thumb
	.thumb_func
	.fpu fpv4-sp-d16
	.type	AddRSLicense, %function
AddRSLicense:
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	mov	r6, r3
	subs	r3, r0, #1
	adds	r3, r3, #3
	sub	sp, sp, #20
	mov	r5, r0
	mov	r4, r1
	mov	r7, r2
	bhi	.L16
	mov	r1, #1431655765
	mov	r0, sp
	bl	CPUID.part.0
	subs	r1, r0, #0
	it	lt
	addlt	r1, r1, #3
	ldr	r2, .L22
	asrs	r1, r1, #2
	movs	r3, #0
.L12:
	cmp	r1, r3
	ble	.L11
	ldr	r0, [sp, r3, lsl #2]
	adds	r3, r3, #1
	add	r2, r2, r0
	b	.L12
.L11:
	add	r2, r2, r7
	subs	r0, r2, r6
	it	ne
	movne	r0, #1
	subs	r1, r4, #0
	it	lt
	addlt	r1, r1, #3
	movs	r4, #0
	asrs	r1, r1, #2
	mov	r3, r4
.L15:
	cmp	r1, r4
	ble	.L8
	cbz	r4, .L14
	ldr	r7, [r5, r4, lsl #2]
	cmp	r5, r7
	bne	.L14
	cmp	r2, r6
	it	eq
	streq	r3, [r5, r4, lsl #2]
.L14:
	adds	r4, r4, #1
	b	.L15
.L16:
	movs	r0, #1
.L8:
	add	sp, sp, #20
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L23:
	.align	2
.L22:
	.word	-2091612265
	.size	AddRSLicense, .-AddRSLicense
	.global	__aeabi_ui2d
	.global	__aeabi_ddiv
	.global	__aeabi_d2f
	.section	.text.BatteryVoltage,"ax",%progbits
	.align	1
	.global	BatteryVoltage
	.syntax unified
	.thumb
	.thumb_func
	.fpu fpv4-sp-d16
	.type	BatteryVoltage, %function
BatteryVoltage:
	@ args = 0, pretend = 0, frame = 128
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	ldr	r5, .L32
	ldr	r6, .L32+4
	ldr	r3, [r5, #76]
	orr	r3, r3, #8192
	str	r3, [r5, #76]
	ldr	r3, [r5, #76]
	sub	sp, sp, #132
	and	r3, r3, #8192
	str	r3, [sp]
	ldr	r3, [sp]
	ldr	r3, [r5, #136]
	orr	r3, r3, #805306368
	str	r3, [r5, #136]
	add	r0, sp, #28
	str	r6, [sp, #28]
	bl	HAL_ADC_DeInit
	cmp	r0, #0
	bne	.L26
	movs	r3, #1
	strd	r3, r0, [sp, #64]
	strd	r0, r0, [sp, #32]
	strd	r0, r0, [sp, #40]
	movs	r7, #4
	strh	r0, [sp, #52]	@ movhi
	str	r3, [sp, #56]
	strb	r0, [sp, #60]
	str	r0, [sp, #72]
	strb	r0, [sp, #76]
	mov	r3, #4096
	strb	r0, [sp, #84]
	add	r0, sp, #28
	str	r7, [sp, #48]
	str	r3, [sp, #80]
	bl	HAL_ADC_Init
	cmp	r0, #0
	bne	.L27
	ldr	r2, .L32+8
	movs	r3, #6
	strd	r2, r3, [sp, #4]
	strd	r7, r0, [sp, #20]
	movs	r3, #7
	movs	r4, #127
	add	r1, sp, r7
	add	r0, sp, #28
	strd	r3, r4, [sp, #12]
	bl	HAL_ADC_ConfigChannel
	cmp	r0, #0
	bne	.L28
	mov	r1, r4
	add	r0, sp, #28
	bl	HAL_ADCEx_Calibration_Start
	cmp	r0, #0
	bne	.L29
	add	r0, sp, #28
	bl	HAL_ADC_Start
	cmp	r0, #0
	bne	.L30
	movs	r1, #10
	add	r0, sp, #28
	bl	HAL_ADC_PollForConversion
	cmp	r0, #0
	bne	.L31
	add	r0, sp, #28
	bl	HAL_ADC_GetValue
	ldr	r3, .L32+12
	udiv	r0, r3, r0
	bl	__aeabi_ui2d
	ldr	r3, .L32+16
	movs	r2, #0
	bl	__aeabi_ddiv
	bl	__aeabi_d2f
	mov	r4, r0	@ float
	add	r0, sp, #28
	bl	ADC_Disable
	add	r0, sp, #28
	bl	HAL_ADC_DeInit
	ldr	r3, [r5, #136]
	bic	r3, r3, #805306368
	str	r3, [r5, #136]
	ldr	r3, [r5, #76]
	bic	r3, r3, #8192
	str	r3, [r5, #76]
	ldr	r3, [r6, #8]
	bic	r3, r3, #25165824
	str	r3, [r6, #8]
.L24:
	mov	r0, r4	@ float
	add	sp, sp, #132
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L26:
	mov	r4, #1065353216
	b	.L24
.L27:
	mov	r4, #1073741824
	b	.L24
.L28:
	ldr	r4, .L32+20
	b	.L24
.L29:
	mov	r4, #1082130432
	b	.L24
.L30:
	ldr	r4, .L32+24
	b	.L24
.L31:
	ldr	r4, .L32+28
	b	.L24
.L33:
	.align	2
.L32:
	.word	1073876992
	.word	1342439424
	.word	-2147483647
	.word	4914000
	.word	1083129856
	.word	1077936128
	.word	1084227584
	.word	1086324736
	.size	BatteryVoltage, .-BatteryVoltage
	.ident	"GCC: (GNU Tools for Arm Embedded Processors 9-2019-q4-major) 9.2.1 20191025 (release) [ARM/arm-9-branch revision 277599]"
#endif
